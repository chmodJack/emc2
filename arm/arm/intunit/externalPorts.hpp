/***************************************************************************//**
*
*           _/       _/_/_/      _/         _/
*         _/_/      _/    _/    _/_/      __/
*       _/  _/     _/    _/    _/ _/    _/_/
*     _/_/_/_/    _/_/_/      _/  _/  _/ _/
*   _/      _/   _/    _/    _/   _/_/  _/
* _/        _/  _/      _/  _/    _/   _/
*
* @brief    This file is part of the SoCRocket ARM ISS generated by TRAP.
* @details  This SystemC model was automatically generated by running
*           $ python ARMArch.py
*           Please refer to the ARM TRAP source files for documentation.
* @author   Lillian Tadros (TUDO ETIT IRF)
* @date     2014-12-01 tadros: Initial ARM Cortex A9 (ARMv7-A) version
*
*
* (c) 2014-2016
* Technische Universitaet Dortmund
* Institut fuer Roboterforschung
* Project Embedded Multi-Core Systems for Mixed Criticality
* Applications in Dynamic and Changeable Real-time Environments (EMC2)
*
*
* This file is part of ARMCortexA9.
*
* ARMCortexA9 is free software; you can redistribute it and/or modify
* it under the terms of the GNU Affero General Public License as
* published by the Free Software Foundation; either version 3 of the
* License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Affero General Public License for more details.
*
* You should have received a copy of the GNU Affero General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc.,
* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
* or see <http://www.gnu.org/licenses/>.
*
*******************************************************************************/

#ifndef CORE_ARMCORTEXA9_FUNC_LT_EXTERNALPORTS_HPP
#define CORE_ARMCORTEXA9_FUNC_LT_EXTERNALPORTS_HPP

#include "arm/intunit/memory.hpp"


#include <systemc.h>
#include <common/tools_if.hpp>
#include <common/report.hpp>
#include <tlm.h>
#include <tlm_utils/simple_initiator_socket.h>
#include <tlm_utils/tlm_quantumkeeper.h>


#define FUNC_MODEL
#define LT_IF

namespace core_armcortexa9_lt {

  /**
  * @brief Port Class
  *
  * Defines the TLM ports used by the core for communicating with other modules.
  */
  class TLMMemory : public MemoryInterface, public sc_module {
    /// @name Constructors and Destructors
    /// @{

    public:
    TLMMemory(
        sc_module_name port_name, tlm_utils::tlm_quantumkeeper& quant_keeper);

    /// @} Constructors and Destructors
    /// ------------------------------------------------------------------------
    /// @name Methods
    /// @{

    public:
    void set_debugger(MemoryToolsIf<unsigned>* debugger);
    sc_dt::uint64 read_dword(const unsigned& address) throw();
    inline unsigned read_word(const unsigned& address) throw() {
      unsigned datum = 0;
      if (this->dmi_ptr_valid) {
        if (address + this->dmi_data.get_start_address() > this->dmi_data.get_end_address())
        {
          SC_REPORT_ERROR("TLM-2", "Error in reading memory data through DMI: address out of bounds");
        }
        memcpy(&datum, this->dmi_data.get_dmi_ptr() - this->dmi_data.get_start_address()
        + address, sizeof(datum));
        this->quant_keeper.inc(this->dmi_data.get_read_latency());
        if (this->quant_keeper.need_sync()) {
          this->quant_keeper.sync();
        }

      } else {
        sc_time delay = this->quant_keeper.get_local_time();
        tlm::tlm_generic_payload trans;
        trans.set_address(address);
        trans.set_read();
        trans.set_data_ptr(reinterpret_cast<unsigned char*>(&datum));
        trans.set_data_length(sizeof(datum));
        trans.set_streaming_width(sizeof(datum));
        trans.set_byte_enable_ptr(0);
        trans.set_dmi_allowed(false);
        trans.set_response_status(tlm::TLM_INCOMPLETE_RESPONSE);
        this->init_socket->b_transport(trans, delay);

        if (trans.is_response_error()) {
          std::string error_str("Error from b_transport, response status = " +
          trans.get_response_string());
          SC_REPORT_ERROR("TLM-2", error_str.c_str());
        }
        if (trans.is_dmi_allowed()) {
          this->dmi_data.init();
          this->dmi_ptr_valid = this->init_socket->get_direct_mem_ptr(trans,
          this->dmi_data);
        }
        // Keep track of time.
        this->quant_keeper.set(delay);
        if (this->quant_keeper.need_sync()) {
          this->quant_keeper.sync();
        }
      }
      // Endianess conversion: The processor is always modeled with the host
      // endianess. In case they are different, the endianess is swapped.
#ifdef BIG_ENDIAN_BO
      this->swap_endianess(datum);
#endif

      return datum;
    } // read_word()

    unsigned short int read_half(const unsigned& address) throw();
    unsigned char read_byte(const unsigned& address) throw();
    void write_dword(
        const unsigned& address, sc_dt::uint64 datum) throw();
    inline void write_word(
        const unsigned& address, unsigned datum) throw() {
      // Endianess conversion: The processor is always modeled with the host
      // endianess. In case they are different, the endianess is swapped.
#ifdef BIG_ENDIAN_BO
      this->swap_endianess(datum);
#endif
      if (this->debugger != NULL) {
        this->debugger->notify_address(address, sizeof(datum));
      }
      if (this->dmi_ptr_valid) {
        if (address + this->dmi_data.get_start_address() > this->dmi_data.get_end_address())
        {
          SC_REPORT_ERROR("TLM-2", "Error in writing memory data through DMI: address out of bounds");
        }
        memcpy(this->dmi_data.get_dmi_ptr() - this->dmi_data.get_start_address()
        + address, &datum, sizeof(datum));
        this->quant_keeper.inc(this->dmi_data.get_write_latency());
        if (this->quant_keeper.need_sync()) {
          this->quant_keeper.sync();
        }
      } else {
        sc_time delay = this->quant_keeper.get_local_time();
        tlm::tlm_generic_payload trans;
        trans.set_address(address);
        trans.set_write();
        trans.set_data_ptr((unsigned char*)&datum);
        trans.set_data_length(sizeof(datum));
        trans.set_streaming_width(sizeof(datum));
        trans.set_byte_enable_ptr(0);
        trans.set_dmi_allowed(false);
        trans.set_response_status(tlm::TLM_INCOMPLETE_RESPONSE);
        this->init_socket->b_transport(trans, delay);

        if (trans.is_response_error()) {
          std::string error_str("Error from b_transport, response status = " +
          trans.get_response_string());
          SC_REPORT_ERROR("TLM-2", error_str.c_str());
        }
        if (trans.is_dmi_allowed()) {
          this->dmi_data.init();
          this->dmi_ptr_valid = this->init_socket->get_direct_mem_ptr(trans,
          this->dmi_data);
        }
        // Keep track of time.
        this->quant_keeper.set(delay);
        if (this->quant_keeper.need_sync()) {
          this->quant_keeper.sync();
        }
      }
    } // write_word()

    void write_half(
        const unsigned& address, unsigned short int datum) throw();
    void write_byte(
        const unsigned& address, unsigned char datum) throw();
    sc_dt::uint64 read_dword_dbg(const unsigned& address) throw();
    unsigned read_word_dbg(const unsigned& address) throw();
    unsigned short int read_half_dbg(const unsigned& address) throw();
    unsigned char read_byte_dbg(const unsigned& address) throw();
    void write_dword_dbg(
        const unsigned& address, sc_dt::uint64 datum) throw();
    void write_word_dbg(
        const unsigned& address, unsigned datum) throw();
    void write_half_dbg(
        const unsigned& address, unsigned short int datum) throw();
    void write_byte_dbg(
        const unsigned& address, unsigned char datum) throw();
    void lock();
    void unlock();

    /// @} Methods
    /// ------------------------------------------------------------------------
    /// @name Data
    /// @{

    public:
    tlm_utils::simple_initiator_socket<TLMMemory, 32> init_socket;

    private:
    MemoryToolsIf<unsigned>* debugger;
    tlm_utils::tlm_quantumkeeper& quant_keeper;
    bool dmi_ptr_valid;
    tlm::tlm_dmi dmi_data;

    /// @} Data
    /// ------------------------------------------------------------------------

  }; // class TLMMemory

} // namespace core_armcortexa9_lt

/// ****************************************************************************

#endif // CORE_ARMCORTEXA9_FUNC_LT_EXTERNALPORTS_HPP
