/***************************************************************************//**
*
*           _/       _/_/_/      _/         _/
*         _/_/      _/    _/    _/_/      __/
*       _/  _/     _/    _/    _/ _/    _/_/
*     _/_/_/_/    _/_/_/      _/  _/  _/ _/
*   _/      _/   _/    _/    _/   _/_/  _/
* _/        _/  _/      _/  _/    _/   _/
*
* @brief    This file is part of the SoCRocket ARM ISS generated by TRAP.
* @details  This SystemC model was automatically generated by running
*           $ python ARMArch.py
*           Please refer to the ARM TRAP source files for documentation.
* @author   Lillian Tadros (Technische Universitaet Dortmund)
* @date     2015-2016 Technische Universitaet Dortmund
*
*
* (c) 2014-2016
* Technische Universitaet Dortmund
* Institut fuer Roboterforschung
* Project Embedded Multi-Core Systems for Mixed Criticality
* Applications in Dynamic and Changeable Real-time Environments (EMC2)
*
*
* This file is part of ARMCortexA9.
*
* ARMCortexA9 is free software; you can redistribute it and/or modify
* it under the terms of the GNU Affero General Public License as
* published by the Free Software Foundation; either version 3 of the
* License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Affero General Public License for more details.
*
* You should have received a copy of the GNU Affero General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc.,
* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
* or see <http://www.gnu.org/licenses/>.
*
*******************************************************************************/

#ifndef CORE_ARMCORTEXA9_FUNC_LT_MAIN_HPP
#define CORE_ARMCORTEXA9_FUNC_LT_MAIN_HPP

#include "processor.hpp"
#include "instructions.hpp"

#include <string>
#include <iostream>
#include <iomanip>
#include <vector>
#include <set>
#include <signal.h>
#include <tlm_utils/multi_passthrough_initiator_socket.h>
#include <boost/program_options.hpp>
#include <boost/timer.hpp>
#include <boost/filesystem.hpp>
#include <modules/sparse_memory_lt.hpp>
#include <common/report.hpp>
#include <systemc.h>
#include <elfloader/elf_frontend.hpp>
#include <elfloader/exec_loader.hpp>
#include <stdexcept>
#include <debugger/gdb_stub.hpp>
#include <profiler/profiler.hpp>
#include <osemu/osemu.hpp>

#ifdef _WIN32
#pragma warning(disable : 4101)
#endif
#define WIN32_LEAN_AND_MEAN


void stop_simulation(int sig);

std::pair<unsigned, unsigned> get_cycle_range(
const std::string& cycles_range, const std::string& application);

class TLMIntrInitiator_1 : public sc_core::sc_module {
  /// @name Constructors and Destructors
  /// @{

  public:
  TLMIntrInitiator_1(sc_core::sc_module_name _name);

  /// @} Constructors and Destructors
  // ---------------------------------------------------------------------------
  /// @name Methods
  /// @{

  public:
  tlm::tlm_sync_enum nb_transport_bw(
  int tag, tlm::tlm_generic_payload& payload, tlm::tlm_phase& phase, sc_core::sc_time&
  delay);
  void invalidate_direct_mem_ptr(
  int tag, sc_dt::uint64 start_range, sc_dt::uint64 end_range) {}


  /// @} Methods
  // ---------------------------------------------------------------------------
  /// @name Data
  /// @{

  public:
  tlm_utils::multi_passthrough_initiator_socket<TLMIntrInitiator_1, 1, tlm::tlm_base_protocol_types>
  init_socket;

  /// @} Data
  // ---------------------------------------------------------------------------

}; // class TLMIntrInitiator_1

// *****************************************************************************

/**
* @brief Main Processor Testbench
*
* Instantiates a processor and performs basic connections where required.
* TRAP-Gen debugging and profiling tools as instantiated as chosen by the
* command-line options.
*/
int sc_main(
int argc, char** argv);

#endif // CORE_ARMCORTEXA9_FUNC_LT_MAIN_HPP
