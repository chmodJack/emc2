/***************************************************************************//**
*
*           _/       _/_/_/      _/         _/
*         _/_/      _/    _/    _/_/      __/
*       _/  _/     _/    _/    _/ _/    _/_/
*     _/_/_/_/    _/_/_/      _/  _/  _/ _/
*   _/      _/   _/    _/    _/   _/_/  _/
* _/        _/  _/      _/  _/    _/   _/
*
* @brief    This file is part of the SoCRocket ARM ISS generated by TRAP.
* @details  This SystemC model was automatically generated by running
*           $ python ARMArch.py
*           Please refer to the ARM TRAP source files for documentation.
* @author   Lillian Tadros (Technische Universitaet Dortmund)
* @date     2015-2016 Technische Universitaet Dortmund
*
*
* (c) 2014-2016
* Technische Universitaet Dortmund
* Institut fuer Roboterforschung
* Project Embedded Multi-Core Systems for Mixed Criticality
* Applications in Dynamic and Changeable Real-time Environments (EMC2)
*
*
* This file is part of ARMCortexA9.
*
* ARMCortexA9 is free software; you can redistribute it and/or modify
* it under the terms of the GNU Affero General Public License as
* published by the Free Software Foundation; either version 3 of the
* License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Affero General Public License for more details.
*
* You should have received a copy of the GNU Affero General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc.,
* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
* or see <http://www.gnu.org/licenses/>.
*
*******************************************************************************/

#ifndef CORE_ARMCORTEXA9_FUNC_LT_PROCESSOR_HPP
#define CORE_ARMCORTEXA9_FUNC_LT_PROCESSOR_HPP

#include "memory.hpp"
#include "instructions.hpp"
#include "interface.hpp"
#include "registers.hpp"
#include "irqPorts.hpp"
#include "decoder.hpp"

#include <systemc.h>
#include <common/report.hpp>
#include <string>
#include <tlm_utils/tlm_quantumkeeper.h>
#include <common/tools_if.hpp>
#include <boost/circular_buffer.hpp>
#include <modules/instruction.hpp>
#include <iostream>
#include <fstream>

#ifdef __GNUC__
#ifdef __GNUC_MINOR__
#if (__GNUC__ >= 4 && __GNUC_MINOR__ >= 3)
#include <tr1/unordered_map>
#define template_map std::tr1::unordered_map
#else
#include <ext/hash_map>
#define  template_map __gnu_cxx::hash_map
#endif
#else
#include <ext/hash_map>
#define  template_map __gnu_cxx::hash_map
#endif
#else
#ifdef _WIN32
#include <hash_map>
#define  template_map stdext::hash_map
#else
#include <map>
#define  template_map std::map
#endif
#endif

#define FUNC_MODEL
#define LT_IF

using namespace trap;

namespace core_armcortexa9_funclt {

  /**
  * @brief Processor Class
  *
  * The top-level processor class holding the pipeline, registers and ports.
  */
  class CoreARMCortexA9FuncLT : public sc_module {
    /// @name Constructors and Destructors
    /// @{

    public:
    CoreARMCortexA9FuncLT(
        sc_module_name name, sc_time latency, MemoryInterface& instr_memory,
        MemoryInterface& data_memory);
    ~CoreARMCortexA9FuncLT();

    /// @} Constructors and Destructors
    // -------------------------------------------------------------------------
    /// @name Methods
    /// @{

    public:
    void main_loop();
    void reset();
    void end_of_elaboration();
    void set_profiling_range(unsigned start_addr, unsigned end_addr);
    void enable_history(std::string file_name = "");
    Instruction* decode(unsigned bitstring);
    Interface& get_interface();

    /// @} Methods
    // -------------------------------------------------------------------------
    /// @name Data
    /// @{

    public:
    SC_HAS_PROCESS(CoreARMCortexA9FuncLT);sc_time latency;
    tlm_utils::tlm_quantumkeeper quant_keeper;
    Registers R;
    MemoryInterface& instr_memory;
    MemoryInterface& data_memory;
    TLMIntrPort_1 IRQ_port;
    TLMIntrPort_1 FIQ_port;
    unsigned num_instructions;
    IRQIntrInstruction* IRQ_instr;
    FIQIntrInstruction* FIQ_instr;
    ToolsManager<unsigned> tool_manager;
    sc_time profiler_time_start;
    sc_time profiler_time_end;
    boost::circular_buffer<HistoryInstrType> history_instr_queue;
    unsigned history_undumped_elements;
    unsigned MPROC_ID;
    unsigned ENTRY_POINT;
    unsigned PROGRAM_START;
    unsigned PROGRAM_LIMIT;
    Interface* ABIIf;

    private:
    static int num_instances;
    bool reset_called;
    bool IRQ;
    bool FIQ;
    Instruction** INSTRUCTIONS;
    bool instr_executing;
    sc_event instr_end_event;
    template_map<unsigned, CacheElem> instr_cache;
    unsigned profiler_start_addr;
    unsigned profiler_end_addr;
    bool history_en;
    std::ofstream history_file;
    Decoder decoder;

    /// @} Data
    // -------------------------------------------------------------------------

  }; // class CoreARMCortexA9FuncLT

  // ***************************************************************************

} // namespace core_armcortexa9_funclt

#endif // CORE_ARMCORTEXA9_FUNC_LT_PROCESSOR_HPP
