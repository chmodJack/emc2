/***************************************************************************//**
*
*           _/       _/_/_/      _/         _/
*         _/_/      _/    _/    _/_/      __/
*       _/  _/     _/    _/    _/ _/    _/_/
*     _/_/_/_/    _/_/_/      _/  _/  _/ _/
*   _/      _/   _/    _/    _/   _/_/  _/
* _/        _/  _/      _/  _/    _/   _/
*
* @brief    This file is part of the SoCRocket ARM ISS generated by TRAP.
* @details  This SystemC model was automatically generated by running
*           $ python ARMArch.py
*           Please refer to the ARM TRAP source files for documentation.
* @author   Lillian Tadros (Technische Universitaet Dortmund)
* @date     2015-2016 Technische Universitaet Dortmund
*
*
* (c) 2014-2016
* Technische Universitaet Dortmund
* Institut fuer Roboterforschung
* Project Embedded Multi-Core Systems for Mixed Criticality
* Applications in Dynamic and Changeable Real-time Environments (EMC2)
*
*
* This file is part of ARMCortexA9.
*
* ARMCortexA9 is free software; you can redistribute it and/or modify
* it under the terms of the GNU Affero General Public License as
* published by the Free Software Foundation; either version 3 of the
* License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Affero General Public License for more details.
*
* You should have received a copy of the GNU Affero General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc.,
* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
* or see <http://www.gnu.org/licenses/>.
*
*******************************************************************************/

#include "registers.hpp"

#include <iostream>
#include <modules/register.hpp>


using namespace core_armcortexa9_funclt;

core_armcortexa9_funclt::Registers::Registers(
    unsigned MPROC_ID,
    unsigned ENTRY_POINT) :
  cpsr("cpsr", trap::amba_LT, false, 0, 0, 0xd3, 8),
  scr("scr", trap::amba_LT, false, 0, 0, 0x0, 8),
  sctlr("sctlr", trap::amba_LT, false, 0, 0, 0x0, 8),
  mp_id("mp_id", trap::amba_LT, false, 0, 0, MPROC_ID, 8),
  spsr {{"spsr[0]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"spsr[1]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"spsr[2]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"spsr[3]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"spsr[4]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"spsr[5]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"spsr[6]", trap::amba_LT, false, 0, 0, 0x0, 8}},
  rb {{"rb[0]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[1]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[2]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[3]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[4]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[5]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[6]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[7]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[8]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[9]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[10]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[11]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[12]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[13]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[14]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[15]", trap::amba_LT, false, 0, 0, ENTRY_POINT, 8},
  {"rb[16]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[17]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[18]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[19]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[20]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[21]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[22]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[23]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[24]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[25]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[26]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[27]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[28]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[29]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[30]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[31]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[32]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[33]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"rb[34]", trap::amba_LT, false, 0, 0, 0x0, 8}},
  cpregs {{"cpregs[0]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"cpregs[1]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"cpregs[2]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"cpregs[3]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"cpregs[4]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"cpregs[5]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"cpregs[6]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"cpregs[7]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"cpregs[8]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"cpregs[9]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"cpregs[10]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"cpregs[11]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"cpregs[12]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"cpregs[13]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"cpregs[14]", trap::amba_LT, false, 0, 0, 0x0, 8},
  {"cpregs[15]", trap::amba_LT, false, 0, 0, 0x0, 8}},
  spsr_irq("spsr_irq"),
  spsr_fiq("spsr_fiq"),
  spsr_und("spsr_und"),
  spsr_abt("spsr_abt"),
  spsr_svc("spsr_svc"),
  spsr_hyp("spsr_hyp"),
  spsr_mon("spsr_mon"),
  sp_irq("sp_irq"),
  lr_irq("lr_irq"),
  r8_fiq("r8_fiq"),
  r9_fiq("r9_fiq"),
  r10_fiq("r10_fiq"),
  r11_fiq("r11_fiq"),
  r12_fiq("r12_fiq"),
  sp_fiq("sp_fiq"),
  lr_fiq("lr_fiq"),
  sp_und("sp_und"),
  lr_und("lr_und"),
  sp_abt("sp_abt"),
  lr_abt("lr_abt"),
  sp_svc("sp_svc"),
  lr_svc("lr_svc"),
  sp_hyp("sp_hyp"),
  elr_hyp("elr_hyp"),
  sp_mon("sp_mon"),
  lr_mon("lr_mon"),
  sp("sp"),
  lr("lr"),
  pc("pc"),
  regs {{"regs[0]"},{"regs[1]"},{"regs[2]"},{"regs[3]"},{"regs[4]"},{"regs[5]"},
  {"regs[6]"},{"regs[7]"},{"regs[8]"},{"regs[9]"},{"regs[10]"},{"regs[11]"},
  {"regs[12]"},{"regs[13]"},{"regs[14]"},{"regs[15]"}} {

  // Initialize registers.
  cpsr.add_field("A", 8, 8);
  cpsr.add_field("C", 29, 29);
  cpsr.add_field("E", 9, 9);
  cpsr.add_field("F", 6, 6);
  cpsr.add_field("I", 7, 7);
  cpsr.add_field("J", 24, 24);
  cpsr.add_field("M", 4, 0);
  cpsr.add_field("N", 31, 31);
  cpsr.add_field("Q", 27, 27);
  cpsr.add_field("GE", 19, 16);
  cpsr.add_field("T", 5, 5);
  cpsr.add_field("V", 28, 28);
  cpsr.add_field("Z", 30, 30);
  cpsr.add_field("IT10", 26, 25);
  cpsr.add_field("IT72", 15, 10);

  scr.add_field("FIQ", 2, 2);
  scr.add_field("AW", 5, 5);
  scr.add_field("FW", 4, 4);
  scr.add_field("IRQ", 1, 1);
  scr.add_field("EA", 3, 3);
  scr.add_field("SIF", 9, 9);
  scr.add_field("UNK_SBZP", 31, 10);
  scr.add_field("HCE", 8, 8);
  scr.add_field("SCD", 7, 7);
  scr.add_field("nET", 6, 6);
  scr.add_field("NS", 0, 0);

  sctlr.add_field("M", 0, 0);
  sctlr.add_field("FI", 21, 21);
  sctlr.add_field("HA", 17, 17);
  sctlr.add_field("B18", 18, 18);
  sctlr.add_field("RR", 14, 14);
  sctlr.add_field("B34", 4, 3);
  sctlr.add_field("B31", 31, 31);
  sctlr.add_field("I", 12, 12);
  sctlr.add_field("TE", 30, 30);
  sctlr.add_field("A", 1, 1);
  sctlr.add_field("C", 2, 2);
  sctlr.add_field("VE", 24, 24);
  sctlr.add_field("EE", 25, 25);
  sctlr.add_field("AFE", 29, 29);
  sctlr.add_field("TRE", 28, 28);
  sctlr.add_field("B69", 9, 6);
  sctlr.add_field("NMFI", 27, 27);
  sctlr.add_field("V", 13, 13);
  sctlr.add_field("WXN", 19, 19);
  sctlr.add_field("Z", 11, 11);
  sctlr.add_field("B2223", 23, 22);
  sctlr.add_field("B26", 26, 26);
  sctlr.add_field("UWXN", 20, 20);
  sctlr.add_field("SW", 10, 10);
  sctlr.add_field("B1516", 16, 15);
  sctlr.add_field("CP15BEN", 5, 5);

  // Initialize register banks.
  for (unsigned i = 0; i < 7; ++i) {
    spsr[i].add_field("A", 8, 8);
    spsr[i].add_field("C", 29, 29);
    spsr[i].add_field("E", 9, 9);
    spsr[i].add_field("F", 6, 6);
    spsr[i].add_field("I", 7, 7);
    spsr[i].add_field("J", 24, 24);
    spsr[i].add_field("M", 4, 0);
    spsr[i].add_field("N", 31, 31);
    spsr[i].add_field("Q", 27, 27);
    spsr[i].add_field("GE", 19, 16);
    spsr[i].add_field("T", 5, 5);
    spsr[i].add_field("V", 28, 28);
    spsr[i].add_field("Z", 30, 30);
    spsr[i].add_field("IT10", 26, 25);
    spsr[i].add_field("IT72", 15, 10);
  }

  // Initialize alias registers and alias register banks.
  this->lr_svc.update_alias(this->rb[30], 0);
  this->spsr_fiq.update_alias(this->spsr[1], 0);
  this->sp_svc.update_alias(this->rb[29], 0);
  this->spsr_irq.update_alias(this->spsr[0], 0);
  this->lr_abt.update_alias(this->rb[28], 0);
  this->sp_abt.update_alias(this->rb[27], 0);
  this->lr_und.update_alias(this->rb[26], 0);
  this->sp_und.update_alias(this->rb[25], 0);
  this->lr_fiq.update_alias(this->rb[24], 0);
  this->sp_fiq.update_alias(this->rb[23], 0);
  this->r12_fiq.update_alias(this->rb[22], 0);
  this->r11_fiq.update_alias(this->rb[21], 0);
  this->r10_fiq.update_alias(this->rb[20], 0);
  this->r9_fiq.update_alias(this->rb[19], 0);
  this->r8_fiq.update_alias(this->rb[18], 0);
  this->lr_irq.update_alias(this->rb[17], 0);
  this->sp_irq.update_alias(this->rb[16], 0);
  this->spsr_mon.update_alias(this->spsr[6], 0);
  this->regs[0].update_alias(this->rb[0], 0);
  this->regs[1].update_alias(this->rb[1], 0);
  this->regs[2].update_alias(this->rb[2], 0);
  this->regs[3].update_alias(this->rb[3], 0);
  this->regs[4].update_alias(this->rb[4], 0);
  this->regs[5].update_alias(this->rb[5], 0);
  this->regs[6].update_alias(this->rb[6], 0);
  this->regs[7].update_alias(this->rb[7], 0);
  this->regs[8].update_alias(this->rb[8], 0);
  this->regs[9].update_alias(this->rb[9], 0);
  this->regs[10].update_alias(this->rb[10], 0);
  this->regs[11].update_alias(this->rb[11], 0);
  this->regs[12].update_alias(this->rb[12], 0);
  this->regs[13].update_alias(this->rb[13], 0);
  this->regs[14].update_alias(this->rb[14], 0);
  this->regs[15].update_alias(this->rb[15], 8);
  this->sp.update_alias(this->regs[13], 0);
  this->pc.update_alias(this->regs[15], 0);
  this->lr.update_alias(this->regs[14], 0);
  this->spsr_hyp.update_alias(this->spsr[5], 0);
  this->lr_mon.update_alias(this->rb[34], 0);
  this->spsr_svc.update_alias(this->spsr[4], 0);
  this->sp_mon.update_alias(this->rb[33], 0);
  this->spsr_abt.update_alias(this->spsr[3], 0);
  this->elr_hyp.update_alias(this->rb[32], 0);
  this->spsr_und.update_alias(this->spsr[2], 0);
  this->sp_hyp.update_alias(this->rb[31], 0);
} // Registers()

// -----------------------------------------------------------------------------

void core_armcortexa9_funclt::Registers::reset() {

  // Reset registers.
  cpsr.reset();
  scr.reset();
  sctlr.reset();
  mp_id.reset();

  // Reset register banks.
  for (int i = 0; i < 7; ++i) {
    spsr[i].reset();
  }

  for (int i = 0; i < 35; ++i) {
    rb[i].reset();
  }

  for (int i = 0; i < 16; ++i) {
    cpregs[i].reset();
  }
} // reset()

// -----------------------------------------------------------------------------

bool core_armcortexa9_funclt::Registers::write(const unsigned& data) {

  bool ret = true;

  // Write registers.
  ret = ret && cpsr.write(data);
  ret = ret && scr.write(data);
  ret = ret && sctlr.write(data);
  ret = ret && mp_id.write(data);

  // Write register banks.
  for (int i = 0; i < 7; ++i) {
    ret = ret && spsr[i].write(data);
  }

  for (int i = 0; i < 35; ++i) {
    ret = ret && rb[i].write(data);
  }

  for (int i = 0; i < 16; ++i) {
    ret = ret && cpregs[i].write(data);
  }

  return ret;
} // write()

// -----------------------------------------------------------------------------

bool core_armcortexa9_funclt::Registers::write_dbg(const unsigned& data) {

  bool ret = true;

  // Write registers.
  ret = ret && cpsr.write_dbg(data);
  ret = ret && scr.write_dbg(data);
  ret = ret && sctlr.write_dbg(data);
  ret = ret && mp_id.write_dbg(data);

  // Write register banks.
  for (int i = 0; i < 7; ++i) {
    ret = ret && spsr[i].write_dbg(data);
  }

  for (int i = 0; i < 35; ++i) {
    ret = ret && rb[i].write_dbg(data);
  }

  for (int i = 0; i < 16; ++i) {
    ret = ret && cpregs[i].write_dbg(data);
  }

  return ret;
} // write_dbg()

// -----------------------------------------------------------------------------

bool core_armcortexa9_funclt::Registers::write_force(const unsigned& data) {

  bool ret = true;

  // Write registers.
  ret = ret && cpsr.write_force(data);
  ret = ret && scr.write_force(data);
  ret = ret && sctlr.write_force(data);
  ret = ret && mp_id.write_force(data);

  // Write register banks.
  for (int i = 0; i < 7; ++i) {
    ret = ret && spsr[i].write_force(data);
  }

  for (int i = 0; i < 35; ++i) {
    ret = ret && rb[i].write_force(data);
  }

  for (int i = 0; i < 16; ++i) {
    ret = ret && cpregs[i].write_force(data);
  }

  return ret;
} // write_force()

// -----------------------------------------------------------------------------

void core_armcortexa9_funclt::Registers::execute_callbacks(
    const scireg_ns::scireg_callback_type& type,
    const uint32_t& offset,
    const uint32_t& size) {

  // Execute callbacks on registers.
  cpsr.execute_callbacks(type, 0, sizeof(unsigned));
  scr.execute_callbacks(type, 0, sizeof(unsigned));
  sctlr.execute_callbacks(type, 0, sizeof(unsigned));
  mp_id.execute_callbacks(type, 0, sizeof(unsigned));

  // Execute callbacks on register banks.
  for (int i = 0; i < 7; ++i) {
    spsr[i].execute_callbacks(type, 0, sizeof(unsigned));
  }

  for (int i = 0; i < 35; ++i) {
    rb[i].execute_callbacks(type, 0, sizeof(unsigned));
  }

  for (int i = 0; i < 16; ++i) {
    cpregs[i].execute_callbacks(type, 0, sizeof(unsigned));
  }
} // execute_callbacks()

// -----------------------------------------------------------------------------

void core_armcortexa9_funclt::Registers::set_stage(unsigned stage) {

  // Set pipeline stage for registers.
  cpsr.get_strategy()->set_stage(stage);
  scr.get_strategy()->set_stage(stage);
  sctlr.get_strategy()->set_stage(stage);
  mp_id.get_strategy()->set_stage(stage);

  // Set pipeline stage for register banks.
  for (int i = 0; i < 7; ++i) {
    spsr[i].set_stage(stage);
  }

  for (int i = 0; i < 35; ++i) {
    rb[i].set_stage(stage);
  }

  for (int i = 0; i < 16; ++i) {
    cpregs[i].set_stage(stage);
  }
} // set_stage()

// -----------------------------------------------------------------------------

void core_armcortexa9_funclt::Registers::unset_stage() {

  // Unset pipeline stage for registers.
  cpsr.get_strategy()->unset_stage();
  scr.get_strategy()->unset_stage();
  sctlr.get_strategy()->unset_stage();
  mp_id.get_strategy()->unset_stage();

  // Unset pipeline stage for register banks.
  for (int i = 0; i < 7; ++i) {
    spsr[i].unset_stage();
  }

  for (int i = 0; i < 35; ++i) {
    rb[i].unset_stage();
  }

  for (int i = 0; i < 16; ++i) {
    cpregs[i].unset_stage();
  }
} // unset_stage()

// -----------------------------------------------------------------------------

void core_armcortexa9_funclt::Registers::clock_cycle() {

  // Propagate pipeline stage for registers.
  cpsr.clock_cycle();
  scr.clock_cycle();
  sctlr.clock_cycle();
  mp_id.clock_cycle();
  // Propagate pipeline stage for register banks.
  for (int i = 0; i < 7; ++i) {
    spsr[i].clock_cycle();
  }

  for (int i = 0; i < 35; ++i) {
    rb[i].clock_cycle();
  }

  for (int i = 0; i < 16; ++i) {
    cpregs[i].clock_cycle();
  }
} // clock_cycle()

// -----------------------------------------------------------------------------

void core_armcortexa9_funclt::Registers::stall(unsigned stage) {

  // Stall pipeline for registers.
  cpsr.stall(stage);
  scr.stall(stage);
  sctlr.stall(stage);
  mp_id.stall(stage);
  // Stall pipeline for register banks.
  for (int i = 0; i < 7; ++i) {
    spsr[i].stall(stage);
  }

  for (int i = 0; i < 35; ++i) {
    rb[i].stall(stage);
  }

  for (int i = 0; i < 16; ++i) {
    cpregs[i].stall(stage);
  }
} // stall()

// -----------------------------------------------------------------------------

void core_armcortexa9_funclt::Registers::advance() {

  // Advance pipeline for registers.
  cpsr.advance();
  scr.advance();
  sctlr.advance();
  mp_id.advance();
  // Advance pipeline for register banks.
  for (int i = 0; i < 7; ++i) {
    spsr[i].advance();
  }

  for (int i = 0; i < 35; ++i) {
    rb[i].advance();
  }

  for (int i = 0; i < 16; ++i) {
    cpregs[i].advance();
  }
} // advance()

// -----------------------------------------------------------------------------

void core_armcortexa9_funclt::Registers::flush(unsigned stage) {

  // Flush registers.
  cpsr.flush(stage);
  scr.flush(stage);
  sctlr.flush(stage);
  mp_id.flush(stage);
  // Flush register banks.
  for (int i = 0; i < 7; ++i) {
    spsr[i].flush(stage);
  }

  for (int i = 0; i < 35; ++i) {
    rb[i].flush(stage);
  }

  for (int i = 0; i < 16; ++i) {
    cpregs[i].flush(stage);
  }
} // flush()

// -----------------------------------------------------------------------------

std::ostream& core_armcortexa9_funclt::Registers::operator <<(std::ostream& os)
const {

  os << std::hex << std::showbase;

  // Print registers.
  os << cpsr.name() << ": " << cpsr.read_dbg() << '\n';
  os << scr.name() << ": " << scr.read_dbg() << '\n';
  os << sctlr.name() << ": " << sctlr.read_dbg() << '\n';
  os << mp_id.name() << ": " << mp_id.read_dbg() << '\n';

  // Print register banks.
  for (int i = 0; i < 7; ++i) {
    os << spsr[i].name() << ": " << spsr[i].read_dbg() << '\n';
  }

  for (int i = 0; i < 35; ++i) {
    os << rb[i].name() << ": " << rb[i].read_dbg() << '\n';
  }

  for (int i = 0; i < 16; ++i) {
    os << cpregs[i].name() << ": " << cpregs[i].read_dbg() << '\n';
  }

  os << std::dec;
  return os;
} // Registers::operator <<()

// -----------------------------------------------------------------------------


// *****************************************************************************

